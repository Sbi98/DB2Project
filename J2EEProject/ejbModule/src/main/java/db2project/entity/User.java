package db2project.entity;

import javax.persistence.*;
import java.io.Serializable;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "user", schema = "DB2Project")
@NamedQueries({
    @NamedQuery(name = "User.checkCredentials",
                query = "SELECT u FROM User u WHERE u.username = ?1 and u.password = ?2"),
    @NamedQuery(name = "User.findReviewersForProduct",
                query = "SELECT u FROM User u, Review r WHERE r.user = u AND r.product.id = ?1 ORDER BY u.points DESC"),
    @NamedQuery(name = "User.findByUsername",
                query = "SELECT u FROM User u WHERE u.username = ?1"),
    @NamedQuery(name = "User.findByEmail",
                query = "SELECT u FROM User u WHERE u.email = ?1")
    //@NamedQuery(name = "User.findByUsernameOrEmail", query = "SELECT u FROM User u WHERE u.username = ?1 or u.email = ?2")
})
public class User implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)//Unique id generated by the persistence provider
    private int id;
    private String username;
    private String password;
    private String email;
    private byte isBlocked;
    private byte isAdmin;
    private long points;

    @OneToMany(
        fetch = FetchType.LAZY, //non è necessario caricare gli accessi
        mappedBy = "user"
        //dal workflow dell'applicazione non sono necessarie politiche di cascade/orphanRemoval
    )
    private List<Access> accesses;

    @OneToMany(
        fetch = FetchType.LAZY, //non è necessario caricare le review di un utente
        mappedBy = "user",
        orphanRemoval = true
        //dal workflow dell'applicazione non sono necessarie politiche di cascade
    )
    private List<Review> reviews;

    @ManyToMany(
        fetch = FetchType.LAZY,
        mappedBy = "repentedUsers"
    )
    private Set<Product> productsWithDeletedReview;

    public User() { }

    public User(String username, String password, String email) {
        this.username = username;
        this.password = password;
        this.email = email;
        this.isBlocked = (byte) 0;
        this.isAdmin = (byte) 0;
    }

    public List<Access> getAccesses() { return accesses; }

    public List<Review> getReviews() { return reviews; }



    protected void addAccess(Access a) { //usato dal costruttore di Access per aggiornare l'altro lato della relazione
        if (accesses == null) {
            accesses = new LinkedList<>();
        }
        accesses.add(a);
    }

    protected void addReview(Review r) { //usato dal costruttore di Review per aggiornare l'altro lato della relazione
        if (reviews == null) {
            reviews = new LinkedList<>();
        }
        reviews.add(r);
    }

    public void removeReview(Review r) {
        if (r != null && reviews != null) {
            reviews.remove(r);
        }
    }


    protected void addProductWithDeletedReview(Product p) { //usato dal prodotto per aggiornare l'altro lato della relazione
        if (productsWithDeletedReview == null) {
            productsWithDeletedReview = new HashSet<>();
        }
        productsWithDeletedReview.add(p);
    }

    protected void removeProductWithDeletedReview(Product p) { //usato dal prodotto per aggiornare l'altro lato della relazione
        if (productsWithDeletedReview != null) {
            productsWithDeletedReview.remove(p);
        }
    }




    public Set<Product> getProductsWithDeletedReview() { return productsWithDeletedReview; }

    public long getPoints() { return points; }
    //public void setPoints(long points) { this.points = points; }

    public int getId() { return id; }
    //public void setId(int id) { this.id = id; }

    public String getUsername() { return username; }
    //public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }
    //public void setPassword(String password) { this.password = password; }

    public String getEmail() { return email; }
    //public void setEmail(String email) { this.email = email; }

    public boolean isBlocked() { return isBlocked == ((byte) (1)); }
    public void block() { this.isBlocked = (byte) 1; }
    //public void setIsBlocked(boolean isBlocked) { this.isBlocked = isBlocked ? (byte) 1 : (byte) 0; }

    public boolean isAdmin() { return isAdmin == ((byte) (1)); }
    //public void setIsAdmin(boolean isAdmin) { this.isAdmin = isAdmin ? (byte) 1 : (byte) 0; }


}
