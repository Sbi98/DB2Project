package db2project.entity;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

@Entity
@Table(name = "MQuestion", schema = "DB2Project")
public class MQuestion implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)//Unique id generated by the persistence provider
    private int id;

    @ManyToOne
    @JoinColumn(name = "product")
    private Product product;

    private String text;

    @OneToMany(
        fetch = FetchType.EAGER,
        mappedBy = "question"

        /* cascade e orphanRemoval non necessari considerando i workflow dell'applicazione
        cascade = { CascadeType.PERSIST, CascadeType.REMOVE, CascadeType.REFRESH },
        orphanRemoval = true*/
    )
    private List<MAnswer> answers;

    public MQuestion() { }

    public MQuestion(Product p, String question) { //Update both side of the relationship
        this.product = p;
        this.text = question;
        p.addQuestion(this);
    }

    protected void addAnswer(MAnswer a) { //Usata solo dal costruttore di MAnswer per aggiornare la relazione
        if (answers == null) {
            answers = new LinkedList<>();
        }
        answers.add(a);
    }


    public int getId() { return id; }
    //public void setId(int id) { this.id = id; }

    public Product getProduct() { return product; }
    //public void setProduct(Product product) { this.product = product; }

    public String getText() { return text; }
    //public void setText(String text) { this.text = text; }



}
